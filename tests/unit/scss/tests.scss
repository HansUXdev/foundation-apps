@import "settings";
@import "helpers/functions";
@import "bootcamp";

@include runner-start;

@include describe("Map Next") {
  @include it("should return the value for the key after the given key") {
    $input: (
      one: 'One',
      two: 'Two',
      three: 'Three',
    );
    $actual: map-next($input, two);
    $expected: map-get($input, three);

    @include should(expect($actual), to(be($expected)));
  }

  @include it("should return null if the given key is last in the map") {
    $input: (
      one: 'One',
      two: 'Two',
      three: 'Three',
    );
    $actual: map-next($input, three);
    $expected: null;

    @include should(expect($actual), to(be($expected)));
  }

  @include it("should return null if the given key is not in the map") {
    $input: (
      one: 'One',
      two: 'Two',
      three: 'Three',
    );
    $actual: map-next($input, four);
    $expected: null;

    @include should(expect($actual), to(be($expected)));
  }
}

@include describe("Is It Light") {
  @include it("should return black if the input color is light") {
    $actual: isitlight(#fff);
    $expected: #000;

    @include should(expect($actual), to(be($expected)));
  }

  @include it("should return white if the input color is dark") {
    $actual: isitlight(#000);
    $expected: #fff;

    @include should(expect($actual), to(be($expected)));
  }
}

@include describe("Smart Scale") {
  @include it("should darken a light color") {
    $color: #fff;
    $scale: 5%;
    $threshold: 60%;

    $actual: smartscale($color, $scale, $threshold);
    $expected: scale-color($color, $lightness: -$scale);

    @include should(expect($actual), to(be($expected)));
  }
  @include it("should lighten a dark color") {
    $color: #000;
    $scale: 5%;
    $threshold: 60%;

    $actual: smartscale($color, $scale, $threshold);
    $expected: scale-color($color, $lightness: $scale);

    @include should(expect($actual), to(be($expected)));
  }
}

@include describe("Has Value") {
  @include it("should return false if the given value is not falsey") {
    $boolean: hasvalue(true);
    $number:  hasvalue(1px);
    $color:   hasvalue(#000);
    $list:    hasvalue(1px solid black);
    
    @include should(expect($boolean), to(be(true)));
    @include should(expect($number), to(be(true)));
    @include should(expect($color), to(be(true)));
    @include should(expect($list), to(be(true)));
  }
  @include it("should return false if the given value is falsey") {
    $zero:  hasvalue(0px);
    $null:  hasvalue(null);
    $none:  hasvalue(none);

    @include should(expect($zero), to(be(false)));
    @include should(expect($null), to(be(false)));
    @include should(expect($none), to(be(false)));
  }
}

@include describe("Get Side") {
  @include it("should return correct sides when given one side value") {
    $value: 1rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 1rem, 1rem, 1rem,);

    @include should(expect($actual), to(be($expected)));
  }
  @include it("should return correct sides when given two side values") {
    $value: 1rem 2rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 2rem, 1rem, 2rem,);

    @include should(expect($actual), to(be($expected)));
  }
  @include it("should return correct sides when given three side values") {
    $value: 1rem 2rem 3rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 2rem, 3rem, 2rem,);

    @include should(expect($actual), to(be($expected)));
  }
  @include it("should return correct sides when given four side values") {
    $value: 1rem 2rem 3rem 4rem;
    $actual: (
      get-side($value, top),
      get-side($value, right),
      get-side($value, bottom),
      get-side($value, left),
    );
    $expected: (1rem, 2rem, 3rem, 4rem,);

    @include should(expect($actual), to(be($expected)));
  }
}

@include describe("Strip Unit") {
  @include it("should strip the unit from a number") {
    $actual: strip-unit(20px);
    $expected: 20;

    @include should(expect($actual), to(be($expected)));
  }
  @include it("should return the same number when given a unitless value") {
    $actual: strip-unit(20);
    $expected: 20;

    @include should(expect($actual), to(be($expected)));
  }
}

@include runner-end;